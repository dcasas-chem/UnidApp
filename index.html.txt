<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UnidApp</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Lexend -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lexend:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Lexend', sans-serif;
            background: linear-gradient(135deg, #f5f7fa, #e1e7f0);
            color: #2d3748;
        }
        .glass-container {
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 0, 0, 0.05);
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.1);
        }
        .theme-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
             border: 1px solid rgba(0, 0, 0, 0.08);
        }
        .theme-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 10px 40px rgba(88, 101, 242, 0.2);
            border-color: rgba(128, 138, 255, 0.4);
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .fade-in { animation: fadeIn 0.6s ease-out forwards; }
        input[type="number"], input[type="text"] {
            -moz-appearance: textfield;
            background-color: #f8fafc;
            border: 1px solid #cbd5e1;
            color: #1e293b;
        }
        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none; margin: 0;
        }
        .btn-primary {
            background: linear-gradient(45deg, #4f46e5, #7c3aed);
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(124, 58, 237, 0.5);
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-4xl mx-auto glass-container rounded-2xl p-6 md:p-8">
        
        <div id="main-menu">
            <div class="text-center mb-6">
                <h1 class="text-3xl md:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-violet-600 tracking-tight">UnidApp</h1>
                <p class="text-gray-600 mt-2">Domina los factores de conversión del Sistema Internacional.</p>
            </div>

            <div id="stats-container" class="text-center mb-6 p-4 bg-white/50 rounded-lg border border-gray-200">
                <!-- Stats loaded by JS -->
            </div>

            <div id="theme-selection" class="fade-in">
                <h2 class="text-lg font-semibold text-center text-indigo-600 mb-6">Elige una categoría para comenzar</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                    <button data-theme="simple" class="theme-card text-left p-5 bg-white/60 rounded-xl">
                        <h3 class="text-lg font-bold text-gray-900 mb-1">Magnitudes Simples</h3>
                        <p class="text-gray-600 text-sm">Longitud, masa y tiempo. ¡Ideal para empezar!</p>
                    </button>
                    <button data-theme="derived" class="theme-card text-left p-5 bg-white/60 rounded-xl">
                        <h3 class="text-lg font-bold text-gray-900 mb-1">Magnitudes Derivadas</h3>
                        <p class="text-gray-600 text-sm">Velocidad, área... ¡Unidades compuestas!</p>
                    </button>
                    <button data-theme="prefix" class="theme-card text-left p-5 bg-white/60 rounded-xl">
                        <h3 class="text-lg font-bold text-gray-900 mb-1">Múltiplos y Submúltiplos</h3>
                        <p class="text-gray-600 text-sm">Practica con prefijos: de Giga a nano.</p>
                    </button>
                    <button data-theme="scientific" class="theme-card text-left p-5 bg-white/60 rounded-xl">
                        <h3 class="text-lg font-bold text-gray-900 mb-1">Notación Científica</h3>
                        <p class="text-gray-600 text-sm">El reto definitivo con números muy grandes o pequeños.</p>
                    </button>
                </div>
            </div>
        </div>

        <div id="question-selection" class="hidden fade-in text-center">
            <!-- Content generated by JS -->
        </div>

        <div id="game-view" class="hidden">
            <!-- Content generated by JS -->
        </div>
        
        <div id="game-over-view" class="hidden fade-in text-center p-8">
            <h2 class="text-3xl font-bold text-indigo-600 mb-4">¡Partida Terminada!</h2>
            <p id="final-score-text" class="text-xl text-gray-700 mb-8"></p>
            <button id="play-again-btn" class="btn-primary text-white font-bold py-3 px-10 rounded-lg text-lg">Jugar de Nuevo</button>
        </div>

    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- DATA ---
        const data = {
            simple: {
                longitud: { name: 'Longitud', path: ['km', 'm', 'cm', 'mm'], units: { 'km': { to_next: 1000 }, 'm': { to_next: 100 }, 'cm': { to_next: 10 }, 'mm': {} } },
                masa: { name: 'Masa', path: ['t', 'kg', 'g', 'mg'], units: { 't': { to_next: 1000 }, 'kg': { to_next: 1000 }, 'g': { to_next: 1000 }, 'mg': {} } },
                tiempo: { name: 'Tiempo', path: ['d', 'h', 'min', 's'], units: { 'd': { to_next: 24 }, 'h': { to_next: 60 }, 'min': { to_next: 60 }, 's': {} } }
            },
            derived: {
                velocidad: { name: 'Velocidad', units: { 'km/h': { num: 'km', den: 'h' }, 'm/s': { num: 'm', den: 's' } } },
                area: { name: 'Área', units: { 'km²': { base: 'km' }, 'm²': { base: 'm' }, 'cm²': { base: 'cm' } } }
            },
            prefix: {
                name: 'Múltiplos y Submúltiplos', base_units: ['m', 'g', 's', 'L', 'W'],
                prefixes: { 'G': 1e9, 'M': 1e6, 'k': 1e3, '': 1, 'c': 1e-2, 'm': 1e-3, 'µ': 1e-6, 'n': 1e-9 }
            }
        };
        const simpleUnitToMagnitude = {};
        for (const magKey in data.simple) {
            data.simple[magKey].path.forEach(unitKey => simpleUnitToMagnitude[unitKey] = magKey);
        }

        // --- DOM ELEMENTS ---
        const mainMenu = document.getElementById('main-menu');
        const questionSelectionView = document.getElementById('question-selection');
        const gameView = document.getElementById('game-view');
        const gameOverView = document.getElementById('game-over-view');
        const allViews = [mainMenu, questionSelectionView, gameView, gameOverView];
        
        // --- STATE & GAME LOGIC ---
        let gameState = {};
        let currentTheme = '';

        const showView = (viewToShow) => {
            allViews.forEach(v => v.classList.add('hidden'));
            viewToShow.classList.remove('hidden');
        };

        const getStats = () => JSON.parse(localStorage.getItem('conversionStats')) || { correct: 0, total: 0 };
        const saveStats = (stats) => localStorage.setItem('conversionStats', JSON.stringify(stats));
        const updateStatsDisplay = () => {
            const stats = getStats();
            const accuracy = stats.total > 0 ? ((stats.correct / stats.total) * 100).toFixed(1) : 0;
            const statsContainer = document.getElementById('stats-container');
            statsContainer.innerHTML = `
                <div class="flex items-center justify-center gap-4">
                    <div>
                        <h3 class="font-bold text-gray-800">Estadísticas Globales</h3>
                        <p class="text-sm text-gray-700">Aciertos: <span class="font-semibold text-green-600">${stats.correct}</span> de <span class="font-semibold text-blue-600">${stats.total}</span> | Precisión: <span class="font-semibold text-yellow-600">${accuracy}%</span></p>
                    </div>
                    <button id="reset-stats-btn" class="p-2 rounded-full hover:bg-red-500/10" title="Borrar datos">
                        <svg class="w-5 h-5 text-gray-500 hover:text-red-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                    </button>
                </div>`;
            document.getElementById('reset-stats-btn').addEventListener('click', () => {
                if (confirm('¿Estás seguro de que quieres borrar todas tus estadísticas?')) {
                    localStorage.removeItem('conversionStats');
                    updateStatsDisplay();
                }
            });
        };
        
        document.getElementById('theme-selection').addEventListener('click', (e) => {
            const themeBtn = e.target.closest('button[data-theme]');
            if (!themeBtn) return;
            currentTheme = themeBtn.dataset.theme;
            questionSelectionView.innerHTML = `
                <h2 class="text-2xl font-bold text-indigo-600 mb-6">¿Cuántas preguntas?</h2>
                <div class="flex justify-center flex-wrap gap-4 mt-6">
                    <button data-count="10" class="btn-primary text-white font-bold py-3 px-8 rounded-lg text-lg">10</button>
                    <button data-count="15" class="btn-primary text-white font-bold py-3 px-8 rounded-lg text-lg">15</button>
                    <button data-count="20" class="btn-primary text-white font-bold py-3 px-8 rounded-lg text-lg">20</button>
                </div>
                <button id="back-to-themes-btn" class="text-indigo-600 hover:text-indigo-800 mt-8 flex items-center gap-1.5 mx-auto">
                     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>
                    Volver
                </button>`;
            document.getElementById('back-to-themes-btn').addEventListener('click', () => showView(mainMenu));
            showView(questionSelectionView);
        });

        questionSelectionView.addEventListener('click', (e) => {
            const countBtn = e.target.closest('button[data-count]');
            if (!countBtn) return;
            gameState = { current: 0, score: 0, total: parseInt(countBtn.dataset.count), problem: {} };
            gameView.innerHTML = `
                <div class="flex items-center justify-between mb-2 text-sm">
                    <button id="back-btn" class="text-indigo-600 hover:text-indigo-800 flex items-center gap-1.5">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>
                        Salir
                    </button>
                     <div id="score-display" class="font-semibold text-gray-700"></div>
                </div>
                <div id="progress-container" class="w-full bg-gray-200 rounded-full h-2 mb-4">
                    <div id="progress-bar" class="bg-indigo-500 h-2 rounded-full transition-all duration-300 ease-linear"></div>
                </div>
                <div class="bg-white/50 p-5 rounded-lg text-center border border-gray-200">
                    <p class="text-gray-600 mb-2" id="problem-title"></p>
                    <p id="problem-statement" class="text-xl md:text-2xl font-bold text-indigo-600 tracking-wider"></p>
                </div>
                <div class="mt-5">
                    <p class="text-center text-gray-600 mb-4" id="equation-title"></p>
                    <div id="equation-container" class="overflow-x-auto pb-4">
                        <div class="flex items-center justify-center flex-wrap gap-2 md:gap-4 text-lg md:text-xl min-w-max px-2"></div>
                    </div>
                </div>
                <div class="mt-6 flex justify-center">
                    <button id="check-btn" class="btn-primary px-8 py-3 text-white font-semibold rounded-lg">Comprobar</button>
                </div>
                <div id="feedback-container" class="hidden mt-5 p-4 rounded-lg fade-in"></div>
                <div class="text-center">
                     <button id="next-btn" class="hidden mt-5 btn-primary px-8 py-3 text-white font-semibold rounded-lg">Siguiente Pregunta →</button>
                </div>`;
            document.getElementById('back-btn').addEventListener('click', () => showView(mainMenu));
            document.getElementById('check-btn').addEventListener('click', checkAnswer);
            document.getElementById('next-btn').addEventListener('click', generateProblem);
            showView(gameView);
            generateProblem();
        });

        // --- PROBLEM GENERATION ---
        const generateProblem = () => {
            gameView.querySelector('#feedback-container').classList.add('hidden');
            gameView.querySelector('#check-btn').classList.remove('hidden');
            gameView.querySelector('#next-btn').classList.add('hidden');
            gameView.querySelector('#equation-container div').innerHTML = '';
            
            const value = parseFloat((Math.random() * 200 + 1).toPrecision(3));

            if (currentTheme === 'simple') generateSimpleProblem(value);
            else if (currentTheme === 'derived') generateDerivedProblem(value);
            else if (currentTheme === 'prefix') generatePrefixProblem(value);
            else if (currentTheme === 'scientific') generateScientificProblem();

            updateProgress();
        };

        const getConversionSteps = (fromUnit, toUnit) => {
             const magKey = simpleUnitToMagnitude[fromUnit];
             if(!magKey) return { steps: [], factor: 1};
             const mag = data.simple[magKey];
             const fromIdx = mag.path.indexOf(fromUnit);
             const toIdx = mag.path.indexOf(toUnit);
             if (fromIdx === -1 || toIdx === -1 || fromIdx === toIdx) return { steps: [], factor: 1 };
             
             const steps = [];
             let totalFactor = 1;
             const forward = fromIdx < toIdx;
             const path = forward ? mag.path.slice(fromIdx, toIdx) : mag.path.slice(toIdx, fromIdx).reverse();
             
             path.forEach(u => {
                 const stepFrom = forward ? u : mag.path[mag.path.indexOf(u) + 1];
                 const stepTo = forward ? mag.path[mag.path.indexOf(u) + 1] : u;
                 const factor = mag.units[stepFrom].to_next;
                 if (forward) {
                     steps.push({ num: factor, den: 1, numUnit: stepTo, denUnit: stepFrom });
                     totalFactor *= factor;
                 } else {
                     steps.push({ num: 1, den: factor, numUnit: stepTo, denUnit: stepFrom });
                     totalFactor /= factor;
                 }
             });
             return { steps, factor: totalFactor };
        };
        
        const generateSimpleProblem = (value) => {
            const magKeys = Object.keys(data.simple);
            const mag = data.simple[magKeys[Math.floor(Math.random() * magKeys.length)]];
            let from, to;
            do { from = mag.path[Math.floor(Math.random() * mag.path.length)]; to = mag.path[Math.floor(Math.random() * mag.path.length)]; } while (from === to);
            
            const { steps, factor } = getConversionSteps(from, to);
            gameState.problem = { type: 'factor', value, from, to, steps, correctAnswer: value * factor };
            
            buildFactorEquationUI();
        };
        
        const generateDerivedProblem = (value) => {
            const magKeys = Object.keys(data.derived);
            const magKey = magKeys[Math.floor(Math.random() * magKeys.length)];
            const mag = data.derived[magKey];
            const unitKeys = Object.keys(mag.units);
            let fromKey = unitKeys[0], toKey = unitKeys[1];
            if (Math.random() > 0.5) [fromKey, toKey] = [toKey, fromKey];
            
            const from = mag.units[fromKey], to = mag.units[toKey];
            let steps = [], totalFactor = 1;

            if (magKey === 'area') {
                const conv = getConversionSteps(from.base, to.base);
                steps.push(...conv.steps, ...conv.steps);
                totalFactor = conv.factor * conv.factor;
            } else { // velocity
                const numConv = getConversionSteps(from.num, to.num);
                const denConv = getConversionSteps(from.den, to.den);
                steps.push(...numConv.steps, ...denConv.steps.map(s => ({...s, num: s.den, den: s.num, numUnit: s.denUnit, denUnit: s.numUnit})));
                totalFactor = numConv.factor / denConv.factor;
            }
            
            gameState.problem = { type: 'factor', value, from: fromKey, to: toKey, steps, correctAnswer: value * totalFactor };
            buildFactorEquationUI();
        };

        const generatePrefixProblem = (value) => {
            const prefixes = Object.keys(data.prefix.prefixes);
            const baseUnit = data.prefix.base_units[Math.floor(Math.random() * data.prefix.base_units.length)];
            let fromP, toP;
            do { fromP = prefixes[Math.floor(Math.random() * prefixes.length)]; toP = prefixes[Math.floor(Math.random() * prefixes.length)]; } while (fromP === toP);
            
            const fromFactor = data.prefix.prefixes[fromP];
            const toFactor = data.prefix.prefixes[toP];
            const fromUnit = fromP + baseUnit, toUnit = toP + baseUnit;
            const factor = fromFactor / toFactor;
            
            gameState.problem = { type: 'factor', value, from: fromUnit, to: toUnit, steps: [{num: 1, den: factor, numUnit: toUnit, denUnit: fromUnit}], correctAnswer: value / factor };
            buildFactorEquationUI();
        };
        
        const generateScientificProblem = () => {
             const exponent = Math.floor(Math.random() * 14) - 7;
             const mantissa = parseFloat((Math.random() * 9 + 1).toPrecision(3));
             const value = mantissa * Math.pow(10, exponent);
             gameState.problem = { type: 'scientific', value, correctMantissa: mantissa, correctExponent: exponent };
             buildScientificEquationUI();
        };
        
        // --- UI BUILDERS ---
        const buildFactorEquationUI = () => {
            const { value, from, to, steps } = gameState.problem;
            const container = gameView.querySelector('#equation-container div');
            
            let html = `<div class="font-bold text-gray-800 bg-white/70 p-3 rounded-lg border border-gray-200">${value} ${from}</div>`;
            steps.forEach((step, i) => {
                html += `
                    <div class="text-gray-800">&times;</div>
                    <div class="flex flex-col items-center">
                        <div class="flex items-center gap-2 border-b-2 border-gray-300 pb-2">
                            <input type="number" data-step="${i}" data-type="num" class="w-20 text-center rounded-md p-2 focus:ring-2 focus:ring-indigo-500">
                            <span class="text-indigo-600 font-semibold w-12 text-left">${step.numUnit}</span>
                        </div>
                        <div class="flex items-center gap-2 pt-2">
                            <input type="number" data-step="${i}" data-type="den" class="w-20 text-center rounded-md p-2 focus:ring-2 focus:ring-indigo-500">
                            <span class="text-indigo-600 font-semibold w-12 text-left">${step.denUnit}</span>
                        </div>
                    </div>`;
            });
            html += `
                <div class="text-gray-800">=</div>
                <div class="flex items-center gap-2">
                    <input type="number" id="final-answer" class="w-32 text-center rounded-md p-2 focus:ring-2 focus:ring-indigo-500">
                    <span class="text-indigo-600 font-semibold">${to}</span>
                </div>`;
            container.innerHTML = html;
            gameView.querySelector('#problem-title').textContent = 'Convierte la siguiente cantidad:';
            gameView.querySelector('#problem-statement').textContent = `${value} ${from} a ${to}`;
            gameView.querySelector('#equation-title').textContent = 'Completa la cadena de factores de conversión:';
        };
        
        const buildScientificEquationUI = () => {
             const { value } = gameState.problem;
             const container = gameView.querySelector('#equation-container div');
             container.innerHTML = `
                <div class="flex items-baseline gap-1 text-2xl">
                    <input type="number" id="sci-mantissa" class="w-32 text-center rounded-md p-2 focus:ring-2 focus:ring-indigo-500">
                    <span class="font-semibold text-gray-800">&times; 10</span>
                    <input type="number" id="sci-exponent" class="w-20 text-center rounded-md p-1 text-base self-start relative top-1">
                </div>`;
            gameView.querySelector('#problem-title').textContent = 'Expresa el siguiente número:';
            gameView.querySelector('#problem-statement').textContent = value.toLocaleString('en-US', {useGrouping: false, maximumFractionDigits: 20});
            gameView.querySelector('#equation-title').textContent = 'Escribe la respuesta en notación científica:';
        };

        // --- CHECKING LOGIC ---
        const checkAnswer = () => {
            const { problem } = gameState;
            const tolerance = 0.05; // 5% tolerance for floating point
            const errorMessages = new Set();
            let isCorrect = false;

            if (problem.type === 'factor') {
                let allStepsCorrect = true;
                problem.steps.forEach((step, i) => {
                    const userNum = parseFloat(gameView.querySelector(`[data-step="${i}"][data-type="num"]`).value);
                    const userDen = parseFloat(gameView.querySelector(`[data-step="${i}"][data-type="den"]`).value);
                    if (isNaN(userNum) || Math.abs(userNum - step.num) > tolerance || isNaN(userDen) || Math.abs(userDen - step.den) > tolerance) {
                        allStepsCorrect = false;
                        errorMessages.add(`El factor de conversión en el <b>paso ${i + 1}</b> es incorrecto.`);
                    }
                });

                const userAnswer = parseFloat(gameView.querySelector('#final-answer').value);
                const isAnsCorrect = !isNaN(userAnswer) && (Math.abs(userAnswer - problem.correctAnswer) / (problem.correctAnswer || 1) < tolerance || Math.abs(userAnswer - problem.correctAnswer) < 0.01);
                if (!isAnsCorrect) errorMessages.add('El <b>resultado final</b> es incorrecto.');
                
                isCorrect = allStepsCorrect && isAnsCorrect;

            } else if (problem.type === 'scientific') {
                const userMantissa = parseFloat(gameView.querySelector('#sci-mantissa').value);
                const userExponent = parseFloat(gameView.querySelector('#sci-exponent').value);
                const isMantissaOK = !isNaN(userMantissa) && Math.abs(userMantissa - problem.correctMantissa) < tolerance;
                const isExponentOK = !isNaN(userExponent) && userExponent === problem.correctExponent;
                if (!isMantissaOK) errorMessages.add('La <b>mantisa</b> (el número) es incorrecta.');
                if (!isExponentOK) errorMessages.add('El <b>exponente</b> es incorrecto.');
                
                isCorrect = isMantissaOK && isExponentOK;
            }
            
            gameState.current++;
            if(isCorrect) gameState.score++;
            showFeedback(isCorrect, Array.from(errorMessages));

            if (gameState.current >= gameState.total) {
                const stats = getStats();
                stats.correct += gameState.score;
                stats.total += gameState.total;
                saveStats(stats);
                updateStatsDisplay();
                document.getElementById('final-score-text').textContent = `Tu puntuación fue: ${gameState.score} de ${gameState.total} aciertos.`;
                showView(gameOverView);
            }
        };
        
        const showFeedback = (isCorrect, errors) => {
            const container = gameView.querySelector('#feedback-container');
            container.classList.remove('hidden');
            let explanationHTML = '';

            if (gameState.problem.type === 'factor') {
                explanationHTML = `${gameState.problem.value} ${gameState.problem.from}`;
                gameState.problem.steps.forEach(s => { explanationHTML += ` &times; ( ${s.num.toLocaleString()} ${s.numUnit} / ${s.den.toLocaleString()} ${s.denUnit} )`});
                explanationHTML += ` = ${gameState.problem.correctAnswer.toPrecision(4)} ${gameState.problem.to}`;
            } else if (gameState.problem.type === 'scientific') {
                const displayValue = gameState.problem.value.toLocaleString('en-US', {useGrouping: false, maximumFractionDigits: 20});
                explanationHTML = `${displayValue} = ${gameState.problem.correctMantissa} &times; 10<sup>${gameState.problem.correctExponent}</sup>`;
            }

            container.innerHTML = `
                <div class="flex items-start gap-4">
                    <div class="mt-1">${isCorrect ? `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-600"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22 4 12 14.01 9 11.01"/></svg>` : `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-red-600"><circle cx="12" cy="12" r="10"/><line x1="12" y1="8" x2="12" y2="12"/><line x1="12" y1="16" x2="12.01" y2="16"/></svg>`}</div>
                    <div>
                        <h3 class="text-lg font-bold ${isCorrect ? 'text-green-700' : 'text-red-700'}">${isCorrect ? '¡Excelente!' : '¡Casi lo tienes!'}</h3>
                        <p class="text-gray-700 mt-1">${isCorrect ? 'Has completado el proceso correctamente.' : errors.join('<br>')}</p>
                    </div>
                </div>
                <div class="mt-4 p-4 bg-gray-100/70 border border-gray-200 rounded-lg">
                    <h4 class="font-semibold text-indigo-600 mb-2">Planteamiento Correcto:</h4>
                    <p class="text-sm text-gray-600 font-mono break-words">${explanationHTML}</p>
                </div>`;
            
            gameView.querySelector('#check-btn').classList.add('hidden');
            if(gameState.current < gameState.total) gameView.querySelector('#next-btn').classList.remove('hidden');
            gameView.querySelectorAll('input').forEach(i => i.disabled = true);
        };
        
        const updateProgress = () => {
            const progress = (gameState.current / gameState.total) * 100;
            gameView.querySelector('#progress-bar').style.width = `${progress}%`;
            gameView.querySelector('#score-display').textContent = `Pregunta: ${gameState.current + 1} / ${gameState.total} | Aciertos: ${gameState.score}`;
        };

        // --- INITIALIZATION ---
        document.getElementById('play-again-btn').addEventListener('click', () => { updateStatsDisplay(); showView(mainMenu); });
        updateStatsDisplay();
        showView(mainMenu);
    });
    </script>
</body>
</html>

